                                        Active Record Query



1) find (primary key)->Alway use primary key to find any record
->Employee.find(1)
id: 1,                                                         
 created_at: Tue, 08 Feb 2022 13:13:51.966909000 UTC +00:00,    
 updated_at: Tue, 08 Feb 2022 13:24:24.813021000 UTC +00:00,    
 department_id: 1,                                              
 name: "Suraj",                                                 
 age: 31,                                                       
 salary: 20000.0,                                               
 is_working: nil> 

2) find([primary key, primary key]) -> fetches record for the given list, its like IN
-> Employee.find([1,4])
   id: 1,                                                        
  created_at: Tue, 08 Feb 2022 13:13:51.966909000 UTC +00:00,   
  updated_at: Tue, 08 Feb 2022 13:24:24.813021000 UTC +00:00,   
  department_id: 1,                                             
  name: "Suraj",                                                
  age: 31,                                                      
  salary: 20000.0,                                              
  is_working: nil>,                                             
 #<Employee:0x00007f3224c3b448                                  
  id: 4,                                                        
  created_at: Tue, 08 Feb 2022 13:53:55.042500000 UTC +00:00,   
  updated_at: Tue, 08 Feb 2022 13:53:55.042500000 UTC +00:00,   
  department_id: nil,
  name: "Sun",
  age: nil,
  salary: nil,
  is_working: nil>] 

3) take -> gets record ,no ordering , its like LIMIT
   Employee.take(4)	
[#<Employee:0x00007f3224cbe500                                  
  id: 1,                                                        
  created_at: Tue, 08 Feb 2022 13:13:51.966909000 UTC +00:00,   
  updated_at: Tue, 08 Feb 2022 13:24:24.813021000 UTC +00:00,   
  department_id: 1,                                             
  name: "Suraj",                                                
  age: 31,                                                      
  salary: 20000.0,                                              
  is_working: nil>,                                             
 #<Employee:0x00007f3224cbe3e8                                  
  id: 4,                                                        
  created_at: Tue, 08 Feb 2022 13:53:55.042500000 UTC +00:00,   
  updated_at: Tue, 08 Feb 2022 13:53:55.042500000 UTC +00:00,   
  department_id: nil,
  name: "Sun",
  age: nil,
  salary: nil,
  is_working: nil>,
 #<Employee:0x00007f3224cbe320
  id: 5,
  created_at: Tue, 08 Feb 2022 13:55:48.024354000 UTC +00:00,
  updated_at: Thu, 10 Feb 2022 13:06:49.425965000 UTC +00:00,
  department_id: 1,
  name: "Sunny",
  age: 35,
  salary: nil,
  is_working: true>,
 #<Employee:0x00007f3224cbe208
  id: 2,
  created_at: Tue, 08 Feb 2022 13:42:02.839012000 UTC +00:00,
  updated_at: Thu, 10 Feb 2022 13:06:49.466605000 UTC +00:00,
  department_id: 1,
  name: "Raj",
  age: 32,
  salary: nil,
  is_working: nil>]

4) first (how many records)-> primary key ordered record
->Employee.first(3)
[#<Employee:0x00007f3224b04110                                  
  id: 1,                                                        
  created_at: Tue, 08 Feb 2022 13:13:51.966909000 UTC +00:00,   
  updated_at: Tue, 08 Feb 2022 13:24:24.813021000 UTC +00:00,   
  department_id: 1,                                             
  name: "Suraj",                                                
  age: 31,                                                      
  salary: 20000.0,                                              
  is_working: nil>,                                             
 #<Employee:0x00007f3224b04048                                  
  id: 2,                                                        
  created_at: Tue, 08 Feb 2022 13:42:02.839012000 UTC +00:00,   
  updated_at: Thu, 10 Feb 2022 13:06:49.466605000 UTC +00:00,   
  department_id: 1,
  name: "Raj",
  age: 32,
  salary: nil,
  is_working: nil>,
 #<Employee:0x00007f3224af3f40
  id: 3,
  created_at: Tue, 08 Feb 2022 13:51:49.810024000 UTC +00:00,
  updated_at: Thu, 10 Feb 2022 13:06:49.475110000 UTC +00:00,
  department_id: 2,
  name: "Amit",
  age: 33,
  salary: nil,
  is_working: nil>] 


5) order(attribute_name).first(count of records) -->Order by according to attribute
->Employee.order(:name).first(4) or Employee.order(name: :desc)
[#<Employee:0x0000560c17e11d28                                                        
  id: 3,                                                                              
  created_at: Tue, 08 Feb 2022 13:51:49.810024000 UTC +00:00,                         
  updated_at: Thu, 10 Feb 2022 13:06:49.475110000 UTC +00:00,                         
  department_id: 2,                                                                   
  name: "Amit",                                                                       
  age: 33,                                                                            
  salary: nil,                                                                        
  is_working: nil>,                                                                   
 #<Employee:0x0000560c17e11c60                                                        
  id: 2,                                                                              
  created_at: Tue, 08 Feb 2022 13:42:02.839012000 UTC +00:00,                         
  updated_at: Thu, 10 Feb 2022 13:06:49.466605000 UTC +00:00,                         
  department_id: 1,
  name: "Raj",
  age: 32,
  salary: nil,
  is_working: nil>,
 #<Employee:0x0000560c17e11b98
  id: 8,
  created_at: Thu, 10 Feb 2022 11:14:36.053278000 UTC +00:00,
  updated_at: Thu, 10 Feb 2022 13:06:49.480523000 UTC +00:00,
  department_id: 1,
  name: "Sumit",
  age: 38,
  salary: nil,
  is_working: nil>,
 #<Employee:0x0000560c17e11ad0
  id: 4,
  created_at: Tue, 08 Feb 2022 13:53:55.042500000 UTC +00:00,
  updated_at: Tue, 08 Feb 2022 13:53:55.042500000 UTC +00:00,
  department_id: nil,
  name: "Sun",
  age: nil,
  salary: nil,
  is_working: nil>] 

6) last -> gettiing records from last in primary key order
->Employee.last(2)
[#<Employee:0x0000560c18901c88                                  
  id: 9,                                                        
  created_at: Thu, 10 Feb 2022 11:28:54.584514000 UTC +00:00,   
  updated_at: Thu, 10 Feb 2022 13:06:49.486121000 UTC +00:00,   
  department_id: 2,                                             
  name: "test0",                                                
  age: 39,                                                      
  salary: nil,                                                  
  is_working: nil>,                                             
 #<Employee:0x0000560c18901da0                                  
  id: 10,                                                       
  created_at: Thu, 10 Feb 2022 11:28:54.625729000 UTC +00:00,   
  updated_at: Thu, 10 Feb 2022 13:06:49.491546000 UTC +00:00,   
  department_id: 2,
  name: "test1",
  age: 40,
  salary: nil,
  is_working: nil>] 

7) find_by(attributes_name to match) //no order by ->Gives you first matched record
//Here i have two record of name :Suraj but produces only one
->Employee.find_by name:"Suraj"
id: 1,
 created_at: Tue, 08 Feb 2022 13:13:51.966909000 UTC +00:00,
 updated_at: Tue, 08 Feb 2022 13:24:24.813021000 UTC +00:00,
 department_id: 1,
 name: "Suraj",
 age: 31,
 salary: 20000.0,
 is_working: nil>

8) where – it is same as find_by but gives you all same records if nor used take for limit
-> Employee.where(name: "Suraj")
[#<Employee:0x0000560c184f92f8
  id: 1,
  created_at: Tue, 08 Feb 2022 13:13:51.966909000 UTC +00:00,
  updated_at: Tue, 08 Feb 2022 13:24:24.813021000 UTC +00:00,
  department_id: 1,
  name: "Suraj",
  age: 31,
  salary: 20000.0,
  is_working: nil>,
 #<Employee:0x0000560c184f9208
  id: 11,
  created_at: Fri, 11 Feb 2022 07:00:26.097885000 UTC +00:00,
  updated_at: Fri, 11 Feb 2022 07:00:26.097885000 UTC +00:00,
  department_id: 1,
  name: "Suraj",
  age: nil,
  salary: nil,
  is_working: nil>] 

Fetching data 

9) each -> memory inefficient if large record of db. Gets all data  from db at once in memory
   Employee.all.each {|emp| puts emp.name}

10) find_each(batch_size:int) -> fetches record in batchesize in ascending order with reference of primary key. Memory efficient  loads record in batch_size into memory
-> Employee.find_each(batch_size:2){|emp| puts emp.name}
Suraj                                                                                              
Raj                                                                                                
  Employee Load (0.3ms)  SELECT "employees".* FROM "employees" WHERE "employees"."id" > $1 ORDER BY "employees"."id" ASC LIMIT $2  [["id", 2], ["LIMIT", 2]]
Amit                                                                                               
Sun                                                                                                
  Employee Load (0.3ms)  SELECT "employees".* FROM "employees" WHERE "employees"."id" > $1 ORDER BY "employees"."id" ASC LIMIT $2  [["id", 4], ["LIMIT", 2]]
Sunny                                                                                              
Sumit                                                                                              
  Employee Load (0.3ms)  SELECT "employees".* FROM "employees" WHERE "employees"."id" > $1 ORDER BY "employees"."id" ASC LIMIT $2  [["id", 8], ["LIMIT", 2]]
test0                                                           
test1                                                           
  Employee Load (0.3ms)  SELECT "employees".* FROM "employees" WHERE "employees"."id" > $1 ORDER BY "employees"."id" ASC LIMIT $2  [["id", 10], ["LIMIT", 2]]
Suraj     


11) batch_size(start:int) – loads record in batch but with a start id which will be the primary key also in ascending order
-> Employee.find_each(start:2){|emp| puts emp.id}
id
2                                                                                                                
3                                                                                                                
4                                                                                                                
5                                                                                                                
8                                                                                                                
9                                                                                                                
10                                                                                                               
11     

12) batch_size(start,finish)-- finish fetches record from the start record to the finish record in ascending order of primary key
-> Employee.find_each(start:2,finish:5) {|emp| puts emp.id}
id
2                                                                                                                          
3                                                                                                                          
4                                                                                                                          
5 

12) find_in_batches-> its takes array of records in batches rather than a record or model
-> Employee.find_in_batches {|emps| puts emps.each {|emp| puts emp.id}}
its like[[]]-->arrayof array records

13)  find_in_batches(start,finish)
-> Employee.find_in_batches(start:1,finish:5) {|emps| puts emps.each {|emp| puts emp.id}}


CONDITIONS

14) String match
- > Employee.where("name=’Suraj’”)

15) Array Conditions -->the parameter which we pass inside should match outside params
   Employee.where("name =? AND is_working=?",params[:name],params[:is_working])
->Employee.where("name LIKE '%Su%' AND is_working=?",true)
 id: 5,
  created_at: Tue, 08 Feb 2022 13:55:48.024354000 UTC +00:00,
  updated_at: Thu, 10 Feb 2022 13:06:49.425965000 UTC +00:00,
  department_id: 1,
  name: "Sunny",
  age: 35,
  salary: nil,
  is_working: true>

	:Placeholder condition
	Employee.where("age>=:age1 AND age<=:age2",{age1:31,age2:35})
	place holder with values in the form of hash	

16) Hash Condition--> passing conditions in key valu pair
  	Equality Condition  
  	 Employee(is_working:true)
	
	Range Condition 
	Employee.where(age: 30..35)
           Employee.where(created_at:(Time.now.midnight-1.day)..Time.now.midnight)

	Subset Condition	
	Employee.where(age: [32,31])

17) Not Condition – all record not present in condtion
	Employee.where.not(age:[30..35])

18) OR Condition—sum of both records condition
	Employee.where(is_working:true).or(Employee.where(name:"Suraj"))

19) AND Condition—sum of both records condition
     Employee.where(is_working:true).and(Employee.where(name:"Sunny"))

20) ORDERING—order the recording in asc  or desc order
	Employee.order(name: :asc)
	 Employee.order(name: :asc).order(age: :desc)

21) SELECT –select only particular field given
	Employee.select(:id,:name).distinct

22) LIMITS AND OFFSET –limit ==take, offset
	Employee.limit(3).offset(2) #offset alway start +1

23) GROUP—groups the attribute
	Employee.group(:is_working).count
	{"Sunny"=>1, "Raj"=>1, "Suraj"=>3, "test1"=>1, "test0"=>1, "Amit"=>1, "Sumit"=>1}



24) Having clause
Employee.select("name,sum(salary) as  salary_tot").group(:name).having("sum(salary)>?",00)[0].salary_tot

a=Employee.select("name,sum(salary) as total").group(:name).having("count(name)>1")
a.each {|t|puts t.total}

25) Overiding conditions

- unscope – removed some condition which are specified in unscope(:)
	
	-Employee.limit(5).offset(2).unscope(:order)

26) NULL relations
	


27) Joining Tables
	 
	 Simple Join
	- Employee.joins(:department)
	Will join empoyee table and department table.by using loop will find the employee and department relation
	
	Mutiple inner joins
	- Employee.joins(:department,:account)
	Will join Employee ,departmet,account on basis of employee_id association
	
	Conditions on joins
	
	Employee.joins(:department).where('department.name'=>"HR").order(name: :desc)
	
	
	
28) Eager Loading Associations
	#loading records in few queries not n+1 times where n is number of record passed to yield and 1 is the qery to find the result 
	
	Methods
	1)includes
		#fetches data using IN without looping for n times
		employees=Employee.includes(:department).limit(10)
	
	2)preload
		##fetches data using IN without looping for n times ut not methods can be implemented in preload
		
		
		
29) Scopes
	#creating method for query which are user many time .It is created in model class.Can be used with association also
	-Employee.working # woking is a method in Employee model class
	-Department.first.employees.working ---Can be used with association too
	
30) Dynamic Finder
	#find any record using model attributes
	# Employee.fid_by_name_and_age("Suraj",31)
	
31) Enums
	#its a list of values for the attributes
	for eg - attendance have status like present , absent, on_leave, on_vacation
	 enum :attendance, [:present,:absent,:on_leave,:on_vacation]
	 
32) Method chaining
	#selecting attributes from table after joining and condition 

33) Find or build new object
	
	1)find_or_create_by- if record not exist it creates it and find it or if exists find the record for the conditions, but should follow the validations too
	 # Employee.find_or_create_by(name:"SurajDubey",department_id:5)// here department_id is forign key 
	 
	 2)find_or_create_by!- shows exception after query
	 
	 3)find_or_initialize_by - it donot save the record 
	 

34)find_by_sql
	# finding any record by using sql comads
	 Employee.find_by_sql("Select * from employees where name='Suraj'")
	 
	 1)select_all
	 	# retreives objects for the gien query but not instantiate them.Will return an instance of objects
	 	Employee.connection.select_all("Select * from employees where name='Suraj'")
	 	
	 	 @column_types={},                                                                                                           
 		@columns=["id", "created_at", "updated_at", "department_id", "name", "age", "salary", "is_working"],                        
 		@hash_rows=nil,                                                                                                             
 		@rows=
 		 [[1, 2022-02-08 13:13:51.966909 UTC, 2022-02-08 13:24:24.813021 UTC, 1, "Suraj", 31, 20000.0, nil],
   		[12, 2022-02-11 10:51:05.132047 UTC, 2022-02-11 10:51:05.132047 UTC, 2, "Suraj", 35, nil, nil],
   		[11, 2022-02-11 07:00:26.097885 UTC, 2022-02-11 11:31:00.109433 UTC, 1, "Suraj", 43, 10000.0, nil]]> 
   		
   		#but when conveting it to array it return array of hashses of every record
   		
   		Employee.connection.select_all("Select * from employees where name='Suraj'").to_a
   		[{"id"=>1, "created_at"=>2022-02-08 13:13:51.966909 UTC, "updated_at"=>2022-02-08 13:24:24.813021 UTC, "department_id"=>1, "name"=>"Suraj", "age"=>31, "salary"=>20000.0, "is_working"=>nil},
 		{"id"=>12, "created_at"=>2022-02-11 10:51:05.132047 UTC, "updated_at"=>2022-02-11 10:51:05.132047 UTC, "department_id"=>2, "name"=>"Suraj", "age"=>35, "salary"=>nil, "is_working"=>nil},
 		{"id"=>11, "created_at"=>2022-02-11 07:00:26.097885 UTC, "updated_at"=>2022-02-11 11:31:00.109433 UTC, "department_id"=>1, "name"=>"Suraj", "age"=>43, "salary"=>10000.0, "is_working"=>nil}] 



	 2)pluck
	  # gives you all data in arraylist
	  Employee.pluck(:id,:name)
	  
	  3)ids # return you array of ids
	    - Employee.ids ->  [1, 5, 3, 8, 9, 10, 12, 11, 2, 13, 14]  
	    
	    
35) Exists 
	#exists ? return true/false
	Employee.where(name:"Suraj").exists?
	
36)Calculations

	sum() =Employee.sum(:salary)
	average()-Employee.average(:salary)
	minimum()->Employee.minimum(:salary)
	maximum()->Employee.maximum(:salary)

	
	


	    
	
	
	
	
	
	
	
	

	 
	 






     






		







